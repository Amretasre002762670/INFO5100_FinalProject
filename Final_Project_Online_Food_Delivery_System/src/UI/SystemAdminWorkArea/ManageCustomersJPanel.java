/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.SystemAdminWorkArea;

import Model.Customer.Customer;
import Model.Customer.CustomerDirectory;
import Model.System.Ecosystem;
import Model.Employee.Employee;
import java.awt.CardLayout;
import java.awt.Component;
import Model.UserAccount.UserAccount;
import Model.UserAccount.UserAccountDirectory;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author puppalanagavaishnavi
 */
public class ManageCustomersJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Ecosystem ecosystem;
    private Customer customer;
    CustomerDirectory custList;
    UserAccountDirectory userList;
    Customer updateCustomer;

    public ManageCustomersJPanel(JPanel userProcessContainer, UserAccount account, Ecosystem ecosystem, CustomerDirectory cusList, UserAccountDirectory userList) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.ecosystem = ecosystem;
        this.custList = cusList;
        this.userList = userList;
//        populateComboBox();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCustUsername = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customerJTable = new javax.swing.JTable();
        txtCustUserName = new javax.swing.JTextField();
        lblCustPassword = new javax.swing.JLabel();
        btnUpdateCust = new javax.swing.JButton();
        lblCustStreetAddress = new javax.swing.JLabel();
        txtCustStreetAddress = new javax.swing.JTextField();
        txtCustPass = new javax.swing.JPasswordField();
        lblCustEmailAddress = new javax.swing.JLabel();
        btnSelect = new javax.swing.JButton();
        txtCustEmailAdd = new javax.swing.JTextField();
        lblCustName = new javax.swing.JLabel();
        txtCustName = new javax.swing.JTextField();
        lblCustCity = new javax.swing.JLabel();
        txtCustCity = new javax.swing.JTextField();
        lblCustPincode = new javax.swing.JLabel();
        txtCustPincode = new javax.swing.JTextField();
        lblCustPhoneNumber = new javax.swing.JLabel();
        txtCustPhoneNum = new javax.swing.JTextField();
        btnCreate = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 255));

        lblCustUsername.setText("Username:");

        customerJTable.setBackground(new java.awt.Color(204, 255, 204));
        customerJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Street Address", "City", "Pincode", "PhoneNumber", "Email ID", "UserName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(customerJTable);

        lblCustPassword.setText("Password:");

        btnUpdateCust.setBackground(new java.awt.Color(204, 255, 204));
        btnUpdateCust.setText("Select");
        btnUpdateCust.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdateCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCustActionPerformed(evt);
            }
        });

        lblCustStreetAddress.setText("Street Address");

        lblCustEmailAddress.setText("Email ID:");

        btnSelect.setBackground(new java.awt.Color(204, 255, 204));
        btnSelect.setText("Update");
        btnSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        lblCustName.setText("Name:");

        txtCustName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustNameKeyPressed(evt);
            }
        });

        lblCustCity.setText("City");

        lblCustPincode.setText("Pincode");

        txtCustPincode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustPincodeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustPincodeKeyReleased(evt);
            }
        });

        lblCustPhoneNumber.setText("Phone Number:");

        txtCustPhoneNum.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCustPhoneNumFocusLost(evt);
            }
        });
        txtCustPhoneNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCustPhoneNumKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCustPhoneNumKeyReleased(evt);
            }
        });

        btnCreate.setBackground(new java.awt.Color(204, 255, 204));
        btnCreate.setText("Create");
        btnCreate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        lblTitle.setBackground(new java.awt.Color(0, 153, 153));
        lblTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Manage Customers ");

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 255, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("User Account Details");

        btnDelete.setBackground(new java.awt.Color(204, 255, 204));
        btnDelete.setText("Delete");
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("<< Back");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel2MouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdateCust)
                .addGap(307, 307, 307))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(btnCreate)
                        .addGap(106, 106, 106)
                        .addComponent(btnSelect)
                        .addGap(95, 95, 95)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(137, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(234, 234, 234)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCustUsername)
                                    .addComponent(lblCustPassword))
                                .addGap(45, 45, 45)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCustPass, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCustUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCustStreetAddress)
                                    .addComponent(lblCustEmailAddress)
                                    .addComponent(lblCustName)
                                    .addComponent(lblCustCity)
                                    .addComponent(lblCustPincode)
                                    .addComponent(lblCustPhoneNumber))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCustEmailAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCustStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCustCity, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtCustPincode, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel5))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtCustPhoneNum, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6))
                                    .addComponent(txtCustName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdateCust)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustName)
                    .addComponent(txtCustName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustStreetAddress)
                    .addComponent(txtCustStreetAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustCity)
                    .addComponent(txtCustCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustPincode)
                    .addComponent(txtCustPincode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustPhoneNumber)
                    .addComponent(txtCustPhoneNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustEmailAddress)
                    .addComponent(txtCustEmailAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCustUsername)
                    .addComponent(txtCustUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustPassword)
                    .addComponent(txtCustPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnSelect)
                    .addComponent(btnDelete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

//    public void populateComboBox() {
//        cbxRole.removeAllItems();
//        cbxRole.addItem(Role.RoleType.Customer.toString());
//    }
    public void sendUserAccountDetails(UserAccount userAccount) {
        String queryCustomerTable = "INSERT INTO User_Account_Directory (user_name, user_password, user_role) VALUES (?, ?, ?);";

        try {
            Connection connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/Online_Delivery_system",
                    "root", "amre1999");

            PreparedStatement st_CustomerTable = (PreparedStatement) connection
                    .prepareStatement(queryCustomerTable);
            System.out.println(userAccount.getUsername());
            System.out.println(userAccount.getPassword());
            System.out.println(userAccount.getRole());

            st_CustomerTable.setString(1, userAccount.getUsername());
            st_CustomerTable.setString(2, userAccount.getPassword());
            st_CustomerTable.setString(3, userAccount.getRole());

            st_CustomerTable.execute();
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();

        }
    }

    public int getUserIdForUserCreated(UserAccount user) {
        String queryCustomerTable = "SELECT user_id FROM User_Account_Directory WHERE user_name=?;";
        int cus_id = 0;
        try {
            Connection connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/Online_Delivery_system",
                    "root", "amre1999");

            PreparedStatement st_CustomerTable = (PreparedStatement) connection
                    .prepareStatement(queryCustomerTable);

            st_CustomerTable.setString(1, user.getUsername());

            ResultSet rs = st_CustomerTable.executeQuery();

            while (rs.next()) {
                cus_id = rs.getInt("user_id");
            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();

        }
        return cus_id;
    }

    public void sendCustomerToDB(Customer c) {
        String queryCustomerTable = "INSERT INTO Customer_Directory (customer_name, customer_emailid, customer_phoneNum, customer_street_address, customer_city, customer_pincode, user_id, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        int cus_id = 0;
        try {
            Connection connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/Online_Delivery_system",
                    "root", "amre1999");

            PreparedStatement st_CustomerTable = (PreparedStatement) connection
                    .prepareStatement(queryCustomerTable);

            st_CustomerTable.setString(1, c.getCustName());
            st_CustomerTable.setString(2, c.getCus_emailid());
            st_CustomerTable.setInt(3, c.getCustPhoneNumber());
            st_CustomerTable.setString(4, c.getHome_streetAddress());
            st_CustomerTable.setString(5, c.getHome_City());
            st_CustomerTable.setInt(6, c.getHome_pincode());

            UserAccount user = new UserAccount();
            user.setUsername(c.getUserAccount().getUsername());
            user.setPassword(c.getUserAccount().getPassword());

            cus_id = getUserIdForUserCreated(user);

            System.out.println(cus_id);

            st_CustomerTable.setInt(7, cus_id);
            st_CustomerTable.setString(8, c.getUserAccount().getUsername());

            st_CustomerTable.execute();
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
    }

    public void updateCustomerInDB(Customer c) {
        String updateQuery = "UPDATE Customer_Directory SET customer_name=?, customer_emailid=?, customer_phoneNum=?, customer_street_address=?, customer_city=?, customer_pincode=? WHERE user_id=? ";
        int user_id = 0;

        try {
            Connection connection = (Connection) DriverManager.getConnection("jdbc:mysql://localhost:3306/Online_Delivery_system",
                    "root", "amre1999");

            PreparedStatement st_CustomerTable = (PreparedStatement) connection
                    .prepareStatement(updateQuery);

            st_CustomerTable.setString(1, c.getCustName());
            st_CustomerTable.setString(2, c.getCus_emailid());
            st_CustomerTable.setInt(3, c.getCustPhoneNumber());
            st_CustomerTable.setString(4, c.getHome_streetAddress());
            st_CustomerTable.setString(5, c.getHome_City());
            st_CustomerTable.setInt(6, c.getHome_pincode());

            st_CustomerTable.setInt(7, c.getCustId());

            System.out.println(c.getCustId());
            st_CustomerTable.executeUpdate();
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        }
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) customerJTable.getModel();

        model.setRowCount(0);

        for (Customer customer : custList.getCustomerList()) {
            Object[] row = new Object[7];
//            row[0] = customer.getCustId();
            row[0] = customer;
            row[1] = customer.getHome_streetAddress();
            row[2] = customer.getHome_City();
            row[3] = customer.getHome_pincode();
            row[4] = customer.getCustPhoneNumber();
            row[5] = customer.getCus_emailid();
            row[6] = customer.getUserAccount().getUsername();
            model.addRow(row);

        }
    }


    private void btnUpdateCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCustActionPerformed
        // TODO add your handling code here:
        int selectedRow = customerJTable.getSelectedRow();

        if (selectedRow >= 0) {
            Customer c = (Customer) customerJTable.getValueAt(selectedRow, 0);
            customer = c;
//            txtCustID.setText(Integer.toString(c.getCustId()));
            txtCustName.setText(c.getCustName());
            txtCustStreetAddress.setText(c.getHome_streetAddress());
            txtCustCity.setText(c.getHome_City());
            txtCustPincode.setText(String.valueOf(c.getHome_pincode()));
            txtCustPhoneNum.setText(Integer.toString(c.getCustPhoneNumber()));
            txtCustEmailAdd.setText(c.getCus_emailid());
            txtCustUserName.setEditable(false);
            txtCustUserName.setText(c.getUserAccount().getUsername());
            txtCustPass.setText(c.getUserAccount().getPassword());

            UserAccount user = new UserAccount();
            user.setUsername(txtCustUserName.getText());
            user.setPassword(txtCustPass.getText());

            updateCustomer = new Customer(user);
            updateCustomer.setCustId(c.getCustId());
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

    }//GEN-LAST:event_btnUpdateCustActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:

//        Customer updateCus = new Customer();
        updateCustomer.setCustName(txtCustName.getText());
        updateCustomer.setHome_streetAddress(txtCustStreetAddress.getText());
        updateCustomer.setHome_City(txtCustCity.getText());
        updateCustomer.setHome_pincode(Integer.parseInt(txtCustPincode.getText()));
        updateCustomer.setCustPhoneNumber(Integer.parseInt(txtCustPhoneNum.getText()));
        updateCustomer.setCus_emailid(txtCustEmailAdd.getText());

        updateCustomerInDB(updateCustomer);

        JOptionPane.showMessageDialog(null, "Customer Updated Successfully");
        populateTable();

//        txtCustID.setText("");
        txtCustName.setText("");
        txtCustStreetAddress.setText("");
        txtCustCity.setText("");
        txtCustPincode.setText("");
        txtCustPhoneNum.setText("");
        txtCustEmailAdd.setText("");
        txtCustUserName.setText("");
        txtCustPass.setText("");
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:

        if (txtCustCity.getText().equals("") || txtCustEmailAdd.getText().equals("") || txtCustName.getText().equals("")
                || txtCustPass.getText().equals("") || txtCustPhoneNum.getText().equals("") || txtCustPincode.getText().equals("")
                || txtCustStreetAddress.getText().equals("") || txtCustUserName.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "All fields are mandatory");
        } else {
            String username = txtCustUserName.getText();
            String password = String.valueOf(txtCustPass.getPassword());
            String new_role = "Customer";
//        int CustId = Integer.parseInt(txtCustID.getText());
            String name = txtCustName.getText();
            String streetaddress = txtCustStreetAddress.getText();
            String City = txtCustCity.getText();
            int Pincode = Integer.parseInt(txtCustPincode.getText());
            int phoneNumber = Integer.parseInt(txtCustPhoneNum.getText());
            String Emailaddress = txtCustEmailAdd.getText();
//        Employee employee = ecosystem.getEmployeeDirectory().createEmployee(name);

            UserAccount account = userList.AddUserAccount();
            account.setUsername(username);
            account.setPassword(password);
            account.setRole(new_role);

            sendUserAccountDetails(account);

            Customer c = custList.addCustomer(account);
            c.setCus_emailid(Emailaddress);
            c.setCustPhoneNumber(phoneNumber);
            c.setHome_City(City);
            c.setHome_pincode(Pincode);
            c.setHome_streetAddress(streetaddress);
            c.setCustName(name);

            sendCustomerToDB(c);

            populateTable();

//        txtCustID.setText("");
            txtCustName.setText("");
            txtCustStreetAddress.setText("");
            txtCustEmailAdd.setText("");
            txtCustUserName.setText("");
            txtCustPass.setText("");
            txtCustCity.setText("");
            txtCustPincode.setText("");
            txtCustPhoneNum.setText("");

            JOptionPane.showMessageDialog(null, "Customer has been Created");
        }

    }//GEN-LAST:event_btnCreateActionPerformed

    private void txtCustNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustNameKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtCustNameKeyPressed

    private void txtCustPincodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustPincodeKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            jLabel5.setText("Please Enter Number only");
        } else {
            jLabel5.setText("");
        }

    }//GEN-LAST:event_txtCustPincodeKeyPressed

    private void txtCustPhoneNumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustPhoneNumKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
            jLabel6.setText("Please Enter Number only");
        } else {
            jLabel6.setText("");
        }
    }//GEN-LAST:event_txtCustPhoneNumKeyPressed

    private void txtCustPincodeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustPincodeKeyReleased
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
//            jLabel7.setText("Please Enter Number only");
            txtCustPincode.setText("");
        }
    }//GEN-LAST:event_txtCustPincodeKeyReleased

    private void txtCustPhoneNumKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCustPhoneNumKeyReleased
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if (Character.isLetter(c)) {
//            jLabel7.setText("Please Enter Number only");
            txtCustPhoneNum.setText("");
        }
    }//GEN-LAST:event_txtCustPhoneNumKeyReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = customerJTable.getSelectedRow();

        if (selectedRow >= 0) {
            Customer c = (Customer) customerJTable.getValueAt(selectedRow, 0);
            customer = c;
            custList.removeCustomer(c);
            populateTable();
        } else {
            JOptionPane.showMessageDialog(this, "Select a row");
            return;
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtCustPhoneNumFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCustPhoneNumFocusLost
        // TODO add your handling code here:
        if (!(txtCustPhoneNum.getText().matches("^[0-9]*$")) || !(txtCustPhoneNum.getText().length() == 10)) {
            jLabel6.setText("Please enter only numbers of length 10");
        } else {
            jLabel6.setText("");
        }
    
    }//GEN-LAST:event_txtCustPhoneNumFocusLost

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
//        sysAdminwjp.populateTree();

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseEntered
        // TODO add your handling code here:
        jLabel2.setForeground(Color.blue);
    }//GEN-LAST:event_jLabel2MouseEntered

    private void jLabel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseExited
        // TODO add your handling code here:
        jLabel2.setForeground(Color.red);
    }//GEN-LAST:event_jLabel2MouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnUpdateCust;
    private javax.swing.JTable customerJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCustCity;
    private javax.swing.JLabel lblCustEmailAddress;
    private javax.swing.JLabel lblCustName;
    private javax.swing.JLabel lblCustPassword;
    private javax.swing.JLabel lblCustPhoneNumber;
    private javax.swing.JLabel lblCustPincode;
    private javax.swing.JLabel lblCustStreetAddress;
    private javax.swing.JLabel lblCustUsername;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtCustCity;
    private javax.swing.JTextField txtCustEmailAdd;
    private javax.swing.JTextField txtCustName;
    private javax.swing.JPasswordField txtCustPass;
    private javax.swing.JTextField txtCustPhoneNum;
    private javax.swing.JTextField txtCustPincode;
    private javax.swing.JTextField txtCustStreetAddress;
    private javax.swing.JTextField txtCustUserName;
    // End of variables declaration//GEN-END:variables
}
